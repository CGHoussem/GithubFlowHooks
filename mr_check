#!/usr/bin/env python3
# -*- coding: utf-8; -*-

import subprocess
import sys

import requests

import utils


def msg_merge_pr(token, branch, pr_number):
    p = subprocess.Popen(
        "git rev-parse --show-toplevel", stdout=subprocess.PIPE, shell=True
    )
    (output, _) = p.communicate()
    _ = p.wait()
    repo = utils.get_repo_name_from_git()
    owner = utils.get_github_owner_from_git()

    url = f"https://api.github.com/repos/{owner}/{repo}/pulls/{pr_number}"
    headers = {
        "Accept": "application/vnd.github+json",
        "Authorization": f"Bearer {token}",
        "X-GitHub-Api-Version": "2022-11-28",
    }
    data = {
        "body": "This PR has been merged via a git flow finish",
    }
    response = requests.patch(url, headers=headers, json=data)

    if not response.ok:
        utils.print_error(
            f"Unable to patch the pull request ({response.status_code}): {response.reason}"
        )
        exit(1)


def main(action, origin, branch):
    # Get GITHUB service token
    token = utils.get_token()
    pr = utils.get_pr(token, branch)

    if pr is None:
        utils.print_warning("You need to publish first (in order to create the PR)")
        exit(1)
    if pr["mergeable"] == "null":
        utils.print_warning(
            "A mergeability checking job is in progress..\n\
            Wait fot the job to complete and resubmit the request!"
        )
        exit(1)
    elif pr["mergeable"] == "false":
        utils.print_error("Unable to merge PR due to failed checks.")
        exit(1)

    # update body of PR
    msg_merge_pr(token, branch, pr["number"])


if __name__ == "__main__":
    action = sys.argv[0].split("-")[-1]
    main(action, sys.argv[2], sys.argv[3])
